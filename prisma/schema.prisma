generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id          String           @id @default(cuid())
  stripeId    String           @unique
  name        String           @db.VarChar(200)
  image       String
  altText     String           @db.VarChar(200)
  description String           @db.VarChar(1000)
  price       Int
  carts       Cart[]           @relation("CartToProduct")
  orders      OrderToProduct[]
}

model Cart {
  id       String    @id @default(cuid())
  userId   String
  users    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[] @relation("CartToProduct")

  @@index([userId])
}

model Order {
  id            String           @id @default(cuid())
  userEmail     String?
  userId        String?
  stripeSession String           @unique
  user          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      OrderToProduct[]

  @@index([userId])
}

model OrderToProduct {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [stripeId], references: [stripeId])
  stripeId String

  amount Int

  @@id([orderId, stripeId])
  @@index([orderId])
  @@index([stripeId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  purchaseSession String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  username        String?   @unique
  role            UserRole  @default(USER)
  accounts        Account[]
  carts           Cart[]
  orders          Order[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
